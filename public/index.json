
[{"content":"大家新年快樂！🎉\n感謝你在新年的開始，抽空閱讀我的第一封電子報！\n我是Peter，這是一個全新的嘗試，我希望能透過這封信，和你分享我最近學習和挑戰的點滴。\n▋開啟新技能的旅程\n我正在開發一款小遊戲，不僅是為了學習新技能，更希望讓婚禮上的來賓透過遊戲，認識我和我老婆的故事。\n有趣的是，這是我第一次嘗試開發遊戲！\n▋遊戲：被譽為第九藝術的創作形式\n歷史上，藝術被分為八大類：建築、雕塑、繪畫、音樂、舞蹈、戲劇、文學和電影。\n遊戲融合了設計、美術、敘事、音樂和技術，創造出一種獨特的表現方式，讓玩家能「參與」藝術，而不僅僅是「觀賞」。\n要完成一款遊戲，通常需要掌握以下技能：\n遊戲設計：規劃遊戲玩法與體驗\n程式開發：編寫遊戲邏輯與功能\n美術與設計：製作角色與場景的視覺效果\n音樂與音效：營造聲音氛圍\n專案管理與協作：確保進度與團隊協作\n然而，我目前僅具備程式開發的能力。為了彌補其他方面的不足，我積極借助 AI 和網路資源。以下提供幾個我整理好的資源 👇\n遊戲引擎\nGodot 官方文件: 詳細的教學與範例，非常適合新手入門。 圖像\nPixelLab: 利用 AI 生成點陣圖，簡單好用，適合像素風格遊戲。\nItch.io: 海量免費素材，從角色到場景，應有盡有。\n音樂\nSuno: 用 AI 快速生成背景音樂和音效，提升遊戲氛圍。\npixapay: 免費音效庫，適合小型遊戲的快速需求。\n​\n▋學習中的啟發：勇敢試錯\n作為一名AI演算法工程師，我已有7年以上軟體開發的經驗，熟悉各種相關工具，但這次學習遊戲開發卻讓我感受到新手的「小心翼翼」。\n我嘗試了Godot遊戲引擎來開發遊戲，並用點陣圖軟體繪製素材。\n起初，我照著官方教學一步步學習，雖然完成了基礎功能，但總不敢隨意改動，深怕「一不小心就壞掉」。\n然而，這樣的心態讓我停滯了一兩週。於是，我決定換個方式：勇敢試錯。\n我複製了原始檔案，開始大膽修改，抱著「壞掉了就刪掉重來」的心態，這反而讓我快速突破瓶頸，也學到了更多。\n心得：錯了大不了重來，但不嘗試，永遠無法進步。\nA person who has never made a mistake has never tried anything new.\n— Albert Einstein\n​\n▋目前進度：遊戲雛型完成\n目前遊戲已經有了初步的框架，能讓角色移動並完成一些簡單的互動。\n這雖然只是個開始，但卻是我邁向更大可能性的第一步！\n遊戲畫面搶先看 👇\n​\n▋結語：和你分享這段旅程\n接下來，我會繼續完善這款遊戲，並記錄過程中的挑戰與解決方法，分享給有興趣的朋友。\n如果你也正在學習新技能或計畫開始一個專案，希望我的經歷能給你一些啟發！\n那麼你呢？新的一年，你想學什麼新技能或完成什麼目標？\n期待下次與你分享更多內容！\n感謝你的閱讀！如果你對遊戲開發、Godot 引擎，或 AI 相關的話題感興趣，隨時回覆這封信和我聊聊～\n— Peter\n","date":"3 January 2025","externalUrl":null,"permalink":"/newsletter/newsletter/","section":"Newsletters","summary":"","title":"2025 W01 去年我學到的第一課：失敗是最快的學習方式","type":"newsletter"},{"content":"","date":"3 January 2025","externalUrl":null,"permalink":"/newsletter/","section":"Newsletters","summary":"","title":"Newsletters","type":"newsletter"},{"content":"","date":"3 January 2025","externalUrl":null,"permalink":"/","section":"彼得叩叩","summary":"","title":"彼得叩叩","type":"page"},{"content":"","date":"14 December 2024","externalUrl":null,"permalink":"/tags/space/","section":"Tags","summary":"","title":"Space","type":"tags"},{"content":"","date":"14 December 2024","externalUrl":null,"permalink":"/tags/","section":"Tags","summary":"","title":"Tags","type":"tags"},{"content":"","date":"14 December 2024","externalUrl":null,"permalink":"/posts/","section":"歡迎來到我部落格 ！","summary":"","title":"歡迎來到我部落格 ！","type":"posts"},{"content":"我非常喜歡分享程式語言和技術新知，特別是對那些對寫程式有興趣、但還沒開始嘗試的人提供建議。然而，對於許多初學者來說，第一個遇到的困難通常是：該選哪種語言開始學習？\n最近，我和一些沒有接觸過程式或非資訊相關背景的人討論學習程式的挑戰，整理出以下幾個常見的阻礙：\n非資訊科系的憂慮：擔心自己背景不足，難以入門。\n電腦設備較舊：擔心現有的硬體無法支援學習需求。\n目標不清楚：雖然看到厲害的應用覺得很有趣，但覺得自己無法達到那樣的程度。\n時間不足：下班後忙著吃飯、運動或做家事，所剩時間有限。\n基於這些阻礙，我以自己的經驗設立了幾個選擇程式語言的指標，幫助初學者做決策：\n可讀性：語言與人類語言的相似程度越高，通常越容易理解。\n環境建置容易度：從一台全新電腦到安裝完成所需軟體的難易度與耗時長短。\n上手容易度：學習基本概念及撰寫簡單程式的難易程度。\n此外，我還參考了 TIOBE Programming Community Index，這是一份程式語言的熱門度指數。簡單來說，這份排名基於程式語言在搜尋引擎中的曝光度，反映了開發者討論、課程和相關職務資訊的數量。需要注意的是，這僅代表熱門度，並不等同於語言的優劣。\n下圖是我撰寫本文時的熱門語言排名。剛好前五名都是我有經驗的語言，因此希望透過分析，給初學者、非資訊科背景者及對程式有興趣的業餘愛好者一些實用的選擇建議。\n彼得的經驗 #\r單刀直入老王賣瓜，Python是最推薦的語言沒有之一，我踏入程式語言世界的接觸順序為 C -\u0026gt; C++ -\u0026gt; JAVA -\u0026gt; C# -\u0026gt; Python，第一個實戰的語言是C#，不過我覺得多少會有偏誤，可能最痛苦的時光是在前三者度過，導致我體感覺得前三者很難。\n可能常常網路上看到Python應用在機器學習，JavaScript、PHP用在網頁設計、C/C++用在底層架構設計等等的文章，這些說法大致沒有問題，對於大多數新手來說，可能也不會很確定未來的明確方向，因此我建議先學習會讓你有容易有成就感的語言，未來再根據學習過程中的經驗來轉換程式語言。\n與其煩惱選擇什麼語言，不如先讓自己有寫程式的邏輯思維。\n接下來，一個重要的考量是使用該語言的人數多寡。當使用者多時，相關的教學文章、討論資源和解決方案也會隨之豐富。此外，有些原本僅支持特定語言的工具，往往會因為社群中熱心的開發者而被移植到其他語言，進一步提升這些語言的實用性。\n因此，本文介紹的程式語言能幫助您完成 99% 的常見任務，至於剩下的 1%，就需要靠您的創意與努力來填補了！\nPython #\r可讀性：★★★★★\n建立環境容易度：★★★★★\n上手容易度：★★★★★\nPython 可以說是當下最火爆的程式語言之一。只要是 AI、大數據相關的文章，幾乎都有八成機會提到它。Python 的設計強調可讀性和簡潔的語法，讓程式撰寫變得非常直觀。以下是「Hello World」（初學者常見的第一個程式，用於在螢幕上顯示指定文字）的程式碼範例：\nprint(\u0026#34;Hello World\u0026#34;) 咦！就這樣嗎？( ﾟ∀ ﾟ)ﾉ 沒錯！就是這樣 (*´∀`)~♥\nC/C++ #\r可讀性：★\n建立環境容易度：★★\n上手容易度：★\n因為這篇文章主要探討入手難易度，所以將 C 和 C++ 放在一起討論。作為台灣 IC 設計與半導體產業的重要語言，C 和 C++ 以接近底層、高效能為特色。雖然它們的學習門檻較高，但在特定領域如硬體開發中不可或缺。以下是兩者的「Hello World」範例：\nC：\n#include \u0026lt;stdio.h\u0026gt; int main(void) { printf(\u0026#34;Hello, World!\\n\u0026#34;); return 0; } C++：\n#include \u0026lt;iostream\u0026gt; using namespace std; int main() { cout \u0026lt;\u0026lt; \u0026#34;Hello, C++!\u0026#34; \u0026lt;\u0026lt; endl; return 0; } Java #\r可讀性：★★★\n建立環境容易度：★★★★★\n上手容易度：★★★\nJava 是一門經典的程式語言，其穩定性與廣泛應用讓它在近年仍占有重要地位。無論是前端、後端，還是 Android App 開發，Java 都是常見選擇。以下是「Hello World」範例：\npublic class HelloWorld { public static void main(String[] args) { System.out.println(\u0026#34;Hello World!\u0026#34;); } } C# #\r可讀性：★★★★\n建立環境容易度：★\n上手容易度：★★★★\nC# 是微軟推出的程式語言，特別適合在 Windows 環境中使用。它搭配 Visual Studio 開發工具，可以快速建立圖形化介面 (GUI)。然而，由於安裝開發工具耗時，環境建置的難度稍高。以下是 C# 的「Hello World」範例（以終端機為例）：\nnamespace HelloWorld { class Hello { static void Main(string[] args) { System.Console.WriteLine(\u0026#34;Hello World!\u0026#34;); } } } 結論 #\r看完數據和分析，相信讀者已經有了些許啟發。以下是針對常見問題的回應，結合我個人的經驗，希望能消除大家對學程式的疑慮：\nＱ：不是資訊相關科系的憂慮\nＡ：程式語言只是工具，相關科系背景固然有助於加速學習，但並不是必要條件。舉例來說，你不用是水電工也能學會換燈泡。我的一位碩士同學是心理系背景，但後來成為機器學習領域的大神！\nＱ：電腦設備不好，能學嗎？\nＡ：初學程式時，只要電腦能開機，幾乎都能運行基本程式。等到你愛上寫程式後，再花 3 萬塊買台新電腦作為對自己的投資，也是一件值得的事！\nＱ：學了不知道能幹嘛，覺得離應用很遠\nＡ：生活中其實有許多場景都可以應用程式。新聞常報導的高科技應用固然酷炫，但大部分程式的用途其實是解決日常問題。以我為例，我每天早上需要整理 AI 的預測結果並產生報表，原本要花 20 分鐘的事情，透過一個簡單的程式，我只需 5 分鐘完成。多出的時間，能讓我準備其他工作，甚至稍微當個薪水小偷 (*´艸`)。\nＱ：沒有時間可以學程式\nＡ：根據《原子習慣》的理念，一開始不需要逼自己每天學很久，可以從 10 分鐘開始，逐步延長到 1 小時。你可以將下班後躺沙發的 30 分鐘，或睡前滑手機的時間，用來學程式。當你養成習慣，並體驗到成就感後，學習程式會成為日常的一部分。這也是我規劃課程的方向，希望透過短時間、多次數的學習模式，幫助大家利用碎片時間高效入門。\n本文的切入點是為初學者或對程式有興趣的人提供指引。每種語言都有其優缺點，像 Python 雖然很方便，但速度較慢。我希望透過分享知識，讓非資訊背景的人也能享受寫程式帶來的便利。我接下來會規劃以 Python 為起點，循序漸進地帶領大家愛上寫程式！\n","date":"14 December 2024","externalUrl":null,"permalink":"/posts/how_to_choice_programming_language/","section":"歡迎來到我部落格 ！","summary":"我的第一篇文章","title":"該學什麼程式語言","type":"posts"},{"content":"","externalUrl":null,"permalink":"/authors/","section":"Authors","summary":"","title":"Authors","type":"authors"},{"content":"","externalUrl":null,"permalink":"/categories/","section":"Categories","summary":"","title":"Categories","type":"categories"},{"content":"","externalUrl":null,"permalink":"/series/","section":"Series","summary":"","title":"Series","type":"series"},{"content":"\r副標題 #\r彼得的介紹頁面\n","externalUrl":null,"permalink":"/posts/about/","section":"歡迎來到我部落格 ！","summary":"","title":"關於我","type":"posts"}]